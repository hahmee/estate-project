// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  politicalList       String[]
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  location   Json
  type       Type
  property   Property
  maintenance Int
  size        Int
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
}

enum Type {
  month_pay
  year_pay
  sell
}

enum Property {
  apartment
  condo
  officetel
  one_room
  two_room
  land
}

model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  pet        Pet
  option     Option[]
  safeOption SafeOption[]
  school     Int?
  bus        Int?
  direction  String
  parking    Int?
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String  @unique @db.ObjectId
}

enum Pet {
    yes
    no
}

enum Option {
    shoe
    shower_booth
    stove
    closet
    fire_alarm
    veranda
}

enum SafeOption {
    guard
    video_phone
    intercom
    card_key
    cctv
    safety_door
    window_guard
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  email         String      @unique
  username      String      @unique
  password      String?
  avatar        String?
  externalType  ExternalType    @default(native)
  externalId    String?
  createdAt     DateTime    @default(now())
  posts         Post[]
  savedPosts    SavedPost[]
  chats         Chat[]      @relation(fields: [chatIDs], references: [id])
  chatIDs       String[]    @db.ObjectId
}


enum ExternalType {
    native
    google
    kakao
    naver
    facebook
}


model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  chatUUID  String
  chatUsers  ChatUser[]
  users     User[]    @relation(fields: [userIDs], references: [id])
  userIDs   String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  lastChatAt DateTime  @default(now())
  messages  Message[]
  lastMessage String?

  @@unique([chatUUID, createdAt])

}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}


model ChatUser {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId     String   @db.ObjectId
  chat       Chat     @relation(fields: [chatId], references: [id])
  userId     String   @db.ObjectId
  lastReadAt  DateTime @default(now()) // 개별 사용자의 마지막 읽은 시간
  @@unique([userId, chatId]) // 한 사용자는 한 채팅방에 한 번만 참여 가능

}